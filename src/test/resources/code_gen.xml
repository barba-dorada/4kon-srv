<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.8.0.xsd">
    <!-- Configure the database connection here -->
    <jdbc>
        <driver>org.postgresql.Driver</driver>
        <url>jdbc:postgresql://192.168.56.102:5432/kon4</url>
        <user>vad</user>
        <password>123</password>

    </jdbc>
    <generator>
        <!-- The default code generator. You can override this one, to generate your own code style.
        Supported generators:
        - org.jooq.util.JavaGenerator
        - org.jooq.util.ScalaGenerator
        Defaults to org.jooq.util.JavaGenerator -->
        <name>org.jooq.util.JavaGenerator</name>
        <database>
            <!-- The database type. The format here is:
            org.util.[database].[database]Database -->
            <name>org.jooq.util.postgres.PostgresDatabase</name>
            <!-- The database schema (or in the absence of schema support, in your RDBMS this
            can be the owner, user, database name) to be generated -->
            <inputSchema>public</inputSchema>
            <!-- All elements that are generated from your schema
            (A Java regular expression. Use the pipe to separate several expressions)
            Watch out for case-sensitivity. Depending on your database, this might be important! -->
            <includes>.*</includes>
            <!-- All elements that are excluded from your schema
            (A Java regular expression. Use the pipe to separate several expressions).
            Excludes match before includes -->
            <excludes></excludes>

            <!-- Then, associate custom types with database columns -->
            <forcedTypes>
                <forcedType>
                    <!-- Specify the Java type of your custom type. This corresponds to the Converter's <U> type. -->
                    <userType>java.time.LocalDateTime</userType>
                    <!-- Associate that custom type with your converter. -->
                    <converter>model.DateConverter</converter>
                    <!-- Add a Java regular expression matching fully-qualified columns. Use the pipe to separate several expressions.
                    If provided, both "expressions" and "types" must match. -->
                    <!--<expression>.*\.DATE_OF_.*</expression>-->
                    <!-- Add a Java regular expression matching data types to be forced to
                    have this type.
                    Data types may be reported by your database as:
                    - NUMBER regexp suggestion: NUMBER
                    - NUMBER(5) regexp suggestion: NUMBER\(5\)
                    - NUMBER(5, 2) regexp suggestion: NUMBER\(5,\s*2\)
                    - any other form
                    It is thus recommended to use defensive regexes for types.
                    If provided, both "expressions" and "types" must match. -->
                    <types>DATE</types>
                </forcedType>
            </forcedTypes>
        </database>

        <generate>
            <daos>true</daos>
        </generate>

        <target>
            <!-- The destination package of your generated classes (within the destination directory) -->
            <packageName>ru.kon.db</packageName>
            <!-- The destination directory of your generated classes. Using Maven directory layout here -->
            <directory>./src/main/java</directory>
        </target>
    </generator>
</configuration>